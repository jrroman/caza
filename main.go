package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"unsafe"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS -type event bpf fentry.c -- -I./headers

var NativeEndian binary.ByteOrder
var mu sync.Mutex

func init() {
	// Determine the endianness of the host machine to translate network addrs
	buf := [2]byte{}
	*(*uint16)(unsafe.Pointer(&buf[0])) = uint16(0xABCD)

	switch buf {
	case [2]byte{0xCD, 0xAB}:
		NativeEndian = binary.LittleEndian
	case [2]byte{0xAB, 0xCD}:
		NativeEndian = binary.BigEndian
	default:
		panic("could not determine endianness of host.")
	}
}

// We need to read the events being sent from our fentry.c program via ringbuffer.
// These events occur on tcp_close events and contain the src and dest ip and port.
func readLoop(rd *ringbuf.Reader, ec chan bpfEvent) {
	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), NativeEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}
		ec <- event
	}
}

// intToIP converts IPv4 number to net.IP
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	NativeEndian.PutUint32(ip, ipNum)
	return ip
}

type comms struct {
	in  int
	out int
}

// We need to process the events being sent down the event channel. As a first stab
// lets create an IP map it could look something like map[net.IP]struct{in out}
func processEvents(ec chan bpfEvent, networks map[string]*net.IPNet) {
	log.Printf("%-15s %-6s -> %-15s %-6s",
		"Src addr",
		"Port",
		"Dest addr",
		"Port",
	)
	for event := range ec {
		srcAddr, dstAddr := intToIP(event.Saddr), intToIP(event.Daddr)
		srcPort, dstPort := event.Sport, event.Dport
		for _, network := range networks {
			if network.Contains(srcAddr) {
				if network.Contains(dstAddr) {
					log.Printf("in network %-15s %-6d -> %-15s %-6d",
						srcAddr, srcPort, dstAddr, dstPort)
					continue
				}
				log.Printf("out network %-15s %-6d -> %-15s %-6d",
					srcAddr, srcPort, dstAddr, dstPort)
			}
		}
	}
}

// TODO pull this network data in from aws or whatever cloud provider we are utilizing
func createNetworkMap() (map[string]*net.IPNet, error) {
	cidrs := []string{"127.0.0.1/16", "192.168.0.0/16", "172.17.0.0/16"}
	netMap := make(map[string]*net.IPNet)
	for idx, cidr := range cidrs {
		_, ipNet, err := net.ParseCIDR(cidr)
		if err != nil {
			return nil, err
		}
		netMap[strconv.Itoa(idx)] = ipNet
	}
	log.Println(netMap)
	return netMap, nil
}

func main() {
	stopChan := make(chan os.Signal, 1)
	signal.Notify(stopChan, os.Interrupt, syscall.SIGTERM)

	// Allow current process to lock memory for eBPF resources
	if err := rlimit.RemoveMemlock(); err != nil {
		fmt.Printf("error: %v", err)
		return
	}

	// Load pre-compiled programs and maps into the kernel
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	defer objs.Close()

	link, err := link.AttachTracing(link.TracingOptions{
		Program: objs.bpfPrograms.TcpClose,
	})
	if err != nil {
		log.Fatal(err)
	}
	defer link.Close()

	/**
	Read new tcp events from the ring buffer event data structure
	struct event {
		u16 sport;
		u16 dport;
		u32 saddr;
		u32 daddr;
	}
	*/
	rd, err := ringbuf.NewReader(objs.bpfMaps.Events)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	networks, err := createNetworkMap()
	if err != nil {
		log.Fatal(err)
	}

	eventChan := make(chan bpfEvent)
	go readLoop(rd, eventChan)
	go processEvents(eventChan, networks)

	<-stopChan
}
